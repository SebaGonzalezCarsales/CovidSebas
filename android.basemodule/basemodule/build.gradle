apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion getRootProjectExtraProperty("androidCompileSdkVersion", 29)
    defaultConfig {
        minSdkVersion getRootProjectExtraProperty("androidMinSdkVersion", 21)
        targetSdkVersion getRootProjectExtraProperty("androidTargetSdkVersion", 29)
        versionCode 3
        versionName "3.2.11"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        //to include module proguard-rules.pro into the project build
        //consumerProguardFiles 'proguard-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    dataBinding {
        enabled = true
    }


    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 10, 'seconds'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

kapt {
    generateStubs = true

    javacOptions {
        // Increase the max count of errors from annotation processors.
        // Default is 100.
        option("-Xmaxerrs", 500)
    }
}


ext {
    //Libraries
    daggerVersion = '2.24'
    roomVersion = '1.1.1'
    androidArchVersion = '1.1.1'
    rxJavaVersion = '2.0.2'
    rxAndroidVersion = '2.1.1'
    javaxAnnotationVersion = '1.0'
    gsonVersion = '2.8.5'
    retrofitVersion = '2.6.1'
    okHttpVersion = '4.1.0'
    rxKotlinVersion = '0.60.0'
    multidexVersion = '1.0.2'
    javaxInjectVersion = '1'
    glideVersion = '4.9.0'

    // Coroutines
    kotlin_coroutine_version = '1.3.0'
    kotlin_lifecycle_version = '2.2.0'
    kotlin_coroutine_adapter_version = '0.9.2'

    //testing
    junitVersion = '4.12'
    runnerVersion = '1.0.2'
    expressoVersion = '3.0.2'
    rulesVersion = '0.5'
    mockitokotlin2Version = '2.1.0'
    mockito4kotlinannotationVersion = '0.3.0'
    mockitoVersion = '1.10.19'
    powerMockito = '1.6.2'
    hamcrestVersion = '1.3'

    javaLifeCycleVersion = '1.1.1'
    eventbus_version = "3.1.1"
    optimizely_version = getRootProjectExtraProperty("global_optimizely_version", "3.1.0")

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    compileOnly(name: 'krux-java-android-sdk-4.1.1', ext: 'aar')

    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${kotlin_version}"
    implementation 'com.google.android.material:material:1.0.0'

    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation "io.reactivex.rxjava2:rxandroid:${rxAndroidVersion}"
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    //Dagger
    implementation "com.google.dagger:dagger:${daggerVersion}"
    kapt "com.google.dagger:dagger-compiler:${daggerVersion}"
    implementation "com.google.dagger:dagger-android-support:${daggerVersion}"
    kapt "com.google.dagger:dagger-android-processor:${daggerVersion}"

    // ViewModel and LiveData
    implementation 'androidx.lifecycle:lifecycle-extensions:2.0.0'
    kapt 'androidx.lifecycle:lifecycle-compiler:2.0.0'

    // ViewModel and LiveData
    implementation 'androidx.lifecycle:lifecycle-common-java8:2.1.0'


    // RxJava support for Room
    implementation 'androidx.room:room-rxjava2:2.2.4'

    // ReactiveStreams support for LiveData
    implementation 'androidx.lifecycle:lifecycle-reactivestreams:2.2.0'

    implementation "org.greenrobot:eventbus:${eventbus_version}"

    // Dexter library for manage app permissions
    implementation 'com.karumi:dexter:5.0.0'


    // Google SignIn
    implementation 'com.google.android.gms:play-services-auth:17.0.0'

    // Facebook
    implementation 'com.facebook.android:facebook-android-sdk:6.3.0'
    // TextView Links
    implementation 'com.klinkerapps:link_builder:2.0.5'


    //Glide
    implementation "com.github.bumptech.glide:glide:${glideVersion}"
    kapt "com.github.bumptech.glide:compiler:${glideVersion}"
    annotationProcessor 'androidx.annotation:annotation:1.1.0'


    implementation('com.github.bumptech.glide:okhttp3-integration:4.9.0') {
        exclude group: 'glide-parent'
    }

    implementation "com.android.volley:volley:1.1.1"

    api "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlin_coroutine_version"
    api "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutine_version"
    api "androidx.lifecycle:lifecycle-viewmodel-ktx:${kotlin_lifecycle_version}"
    api "com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:$kotlin_coroutine_adapter_version"

    implementation "com.squareup.retrofit2:retrofit:${retrofitVersion}"
    implementation "com.squareup.retrofit2:converter-gson:${retrofitVersion}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${retrofitVersion}"
    implementation "com.google.code.gson:gson:${gsonVersion}"

    implementation "com.squareup.okhttp3:logging-interceptor:${okHttpVersion}"
    implementation "com.squareup.okhttp3:okhttp:${okHttpVersion}"
    implementation "com.squareup.okhttp3:okhttp-urlconnection:${okHttpVersion}"


    if (enableGA5.toBoolean()) {
        implementation 'com.google.android.gms:play-services-gcm:17.0.0'
        api 'com.google.firebase:firebase-analytics:17.2.0'
        api 'com.google.android.gms:play-services-tagmanager:17.0.0'
        //Google Analytics
        api 'com.google.android.gms:play-services-analytics:17.0.0'

    } else {
        //Google Analytics
        implementation 'com.google.android.gms:play-services-gcm:17.0.0'
        api 'com.google.android.gms:play-services-analytics:17.0.0'
        api 'com.google.android.gms:play-services-tagmanager-v4-impl:17.0.0'
    }


    testImplementation "junit:junit:${junitVersion}"
    testImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:${mockitokotlin2Version}"
    testImplementation "org.mockito4kotlin:annotation:${mockito4kotlinannotationVersion}"
    testImplementation "org.hamcrest:hamcrest-all:${hamcrestVersion}"

    testImplementation 'androidx.arch.core:core-testing:2.0.1'
    testImplementation 'androidx.test:rules:1.2.0'
    testImplementation 'io.github.benas:random-beans:3.9.0'

    // Glide SVG Loader
    implementation 'com.caverock:androidsvg:1.4'

    compileOnly("com.optimizely.ab:android-sdk:${optimizely_version}") {
        exclude group: 'com.google.code.gson', module: 'gson'
    }
    // ROBOLECTRIC
    testImplementation 'org.robolectric:robolectric:4.2'

    // Jetpack Navigation
    implementation 'com.google.android.material:material:1.0.0'
    implementation "androidx.activity:activity-ktx:1.1.0"
    implementation "androidx.navigation:navigation-fragment-ktx:2.1.0"
    implementation "androidx.navigation:navigation-ui-ktx:2.1.0"
    implementation 'androidx.core:core-ktx:1.1.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-savedstate:1.0.0'
}

repositories {
    mavenCentral()
    flatDir {
        dirs 'libs'
    }
}

def getRootProjectExtraProperty(name, defaultValue) {

    try {
        return rootProject.extensions.getExtraProperties().get(name)
    } catch (Exception e) {
        return defaultValue
    }

}